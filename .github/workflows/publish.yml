name: Publish to crates.io

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Verify version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep '^\[workspace.package\]' -A 10 Cargo.toml | grep '^version' | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi

      - name: Run tests
        run: cargo test --verbose --all-features

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy
        run: cargo clippy --workspace --all-features --all-targets -- -D warnings

      - name: Build release
        run: cargo build --release --verbose

      - name: Publish protest-derive to crates.io
        run: |
          VERSION=$(grep '^version' protest-derive/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-derive/$VERSION" | grep -q '"version"'; then
            echo "protest-derive $VERSION already exists on crates.io, skipping"
          else
            cd protest-derive
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-derive $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-derive/$VERSION" | grep -q '"version"'; then
                echo "protest-derive $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest to crates.io
        run: |
          VERSION=$(grep '^version' protest/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest/$VERSION" | grep -q '"version"'; then
            echo "protest $VERSION already exists on crates.io, skipping"
          else
            cd protest
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest/$VERSION" | grep -q '"version"'; then
                echo "protest $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest-extras to crates.io
        run: |
          VERSION=$(grep '^version' protest-extras/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-extras/$VERSION" | grep -q '"version"'; then
            echo "protest-extras $VERSION already exists on crates.io, skipping"
          else
            cd protest-extras
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-extras $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-extras/$VERSION" | grep -q '"version"'; then
                echo "protest-extras $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest-cli to crates.io
        run: |
          VERSION=$(grep '^version' protest-cli/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-cli/$VERSION" | grep -q '"version"'; then
            echo "protest-cli $VERSION already exists on crates.io, skipping"
          else
            cd protest-cli
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-cli $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-cli/$VERSION" | grep -q '"version"'; then
                echo "protest-cli $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest-stateful to crates.io
        run: |
          VERSION=$(grep '^version' protest-stateful/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-stateful/$VERSION" | grep -q '"version"'; then
            echo "protest-stateful $VERSION already exists on crates.io, skipping"
          else
            cd protest-stateful
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-stateful $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-stateful/$VERSION" | grep -q '"version"'; then
                echo "protest-stateful $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest-stateful-derive to crates.io
        run: |
          VERSION=$(grep '^version' protest-stateful-derive/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-stateful-derive/$VERSION" | grep -q '"version"'; then
            echo "protest-stateful-derive $VERSION already exists on crates.io, skipping"
          else
            cd protest-stateful-derive
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-stateful-derive $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-stateful-derive/$VERSION" | grep -q '"version"'; then
                echo "protest-stateful-derive $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest-criterion to crates.io
        run: |
          VERSION=$(grep '^version' protest-criterion/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-criterion/$VERSION" | grep -q '"version"'; then
            echo "protest-criterion $VERSION already exists on crates.io, skipping"
          else
            cd protest-criterion
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-criterion $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-criterion/$VERSION" | grep -q '"version"'; then
                echo "protest-criterion $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest-insta to crates.io
        run: |
          VERSION=$(grep '^version' protest-insta/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-insta/$VERSION" | grep -q '"version"'; then
            echo "protest-insta $VERSION already exists on crates.io, skipping"
          else
            cd protest-insta
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-insta $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-insta/$VERSION" | grep -q '"version"'; then
                echo "protest-insta $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Publish protest-proptest-compat to crates.io
        run: |
          VERSION=$(grep '^version' protest-proptest-compat/Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if curl -s "https://crates.io/api/v1/crates/protest-proptest-compat/$VERSION" | grep -q '"version"'; then
            echo "protest-proptest-compat $VERSION already exists on crates.io, skipping"
          else
            cd protest-proptest-compat
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
            echo "Published protest-proptest-compat $VERSION, waiting for it to be available..."
            # Wait for the package to be available on crates.io
            for i in {1..30}; do
              if curl -s "https://crates.io/api/v1/crates/protest-proptest-compat/$VERSION" | grep -q '"version"'; then
                echo "protest-proptest-compat $VERSION is now available"
                break
              fi
              sleep 2
            done
          fi
        continue-on-error: false

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## What's New in v${{ steps.version.outputs.version }}

            Published to crates.io:
            - [`protest` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest/${{ steps.version.outputs.version }})
            - [`protest-derive` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-derive/${{ steps.version.outputs.version }})
            - [`protest-extras` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-extras/${{ steps.version.outputs.version }})
            - [`protest-cli` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-cli/${{ steps.version.outputs.version }})
            - [`protest-stateful` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-stateful/${{ steps.version.outputs.version }})
            - [`protest-stateful-derive` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-stateful-derive/${{ steps.version.outputs.version }})
            - [`protest-criterion` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-criterion/${{ steps.version.outputs.version }})
            - [`protest-insta` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-insta/${{ steps.version.outputs.version }})
            - [`protest-proptest-compat` v${{ steps.version.outputs.version }}](https://crates.io/crates/protest-proptest-compat/${{ steps.version.outputs.version }})

            ### Installation
            ```toml
            [dev-dependencies]
            protest = { version = "${{ steps.version.outputs.version }}", features = ["derive"] }
            protest-extras = "${{ steps.version.outputs.version }}"               # Optional: Extra generators
            protest-stateful = "${{ steps.version.outputs.version }}"             # Optional: Stateful testing
            protest-criterion = "${{ steps.version.outputs.version }}"            # Optional: Property-based benchmarking
            protest-insta = "${{ steps.version.outputs.version }}"                # Optional: Snapshot testing
            protest-proptest-compat = "${{ steps.version.outputs.version }}"      # Optional: Migration from proptest

            [dependencies]
            # For derive macros in stateful testing
            protest-stateful-derive = "${{ steps.version.outputs.version }}"
            ```

            ### CLI Tool
            ```bash
            cargo install protest-cli --version ${{ steps.version.outputs.version }}
            ```

            ---

            ${{ github.event.head_commit.message }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
